{"version":3,"sources":["webpack://ckeditor-axe/./src/plugin.js"],"names":["CKEDITOR","plugins","add","lang","onLoad","axe","undefined","run","rules","enabled","bypass","region","callback","error","results","editorName","console","log","instances","editor","violations","nodes","forEach","violation","vid","title","help","description","node","target","document","$","querySelector","dir","path","override","settings","context","this","mandatoryRules","Object","keys","key","scripts","querySelectorAll","length","src","callbackNumber","tools","addFunction","init","plugin","config","on","frame","getHead","append","createElement","attributes","type","defer","ui","addButton","label","name","command","icon","toolbar","addCommand","canUndo","exec","message","arguments","options","getWindow","postMessage"],"mappings":"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","file":"plugin.min.js","sourcesContent":["\"use strict\";\n\n(function(CKEDITOR) {\n  CKEDITOR.plugins.add(\"axe\", {\n    // @todo: Investigate axe-core languages system.\n    lang: \"en\",\n    /**\n     * Pre initialization hook.\n     *\n     * In this function we have definitions of default values for plugin settings.\n     */\n    onLoad: function() {\n      // At this point we are going to provide default options for this plugin.\n      let axe = {};\n\n      /**\n       * Default context is \"document\".\n       *\n       * If value of context is undefined - \"document\" will be used instead.\n       * If you need detailed configuration @see: https://www.deque.com/axe/axe-for-web/documentation/api-documentation/#user-content-api-name-axerun\n       */\n      axe.context = undefined;\n\n      /**\n       * Settings section which will be passed into aXe run command as options.\n       */\n      axe.run = {};\n\n      /**\n       * Tags to use to get default set of rules.\n       *\n       * By default we are going to use validation by tags.\n       * And default tag is \"wcag2a\".\n       */\n      // axe.run.runOnly = {\n      //   type: \"tag\",\n      //   values: [\"wcag2a\"]\n      // };\n\n      /**\n       * Rules to exclude from check.\n       *\n       * For details @see: https://www.deque.com/axe/axe-for-web/documentation/api-documentation/#user-content-options-parameter-examples\n       * List of rules below are excluded because they are not applicable to CKEditor functionality.\n       * By logic of this plugin it should be impossible to override this lis list of rules and their values.\n       */\n      axe.run.rules = {\n        \"aria-hidden-body\": { enabled: false },\n        bypass: { enabled: false },\n        \"document-title\": { enabled: false },\n        \"frame-tested\": { enabled: false },\n        \"frame-title-unique\": { enabled: false },\n        \"frame-title\": { enabled: false },\n        \"html-has-lang\": { enabled: false },\n        \"html-lang-valid\": { enabled: false },\n        \"html-xml-lang-mismatch\": { enabled: false },\n        \"landmark-banner-is-top-level\": { enabled: false },\n        \"landmark-complementary-is-top-level\": { enabled: false },\n        \"landmark-contentinfo-is-top-level\": { enabled: false },\n        \"landmark-main-is-top-level\": { enabled: false },\n        \"landmark-no-duplicate-banner\": { enabled: false },\n        \"landmark-no-duplicate-contentinfo\": { enabled: false },\n        \"landmark-one-main\": { enabled: false },\n        \"meta-viewport-large\": { enabled: false },\n        \"meta-viewport\": { enabled: false },\n        \"page-has-heading-one\": { enabled: false },\n        region: { enabled: false },\n        \"valid-lang\": { enabled: false }\n      };\n\n      /**\n       * Callback to catch results of the axe check.\n       *\n       * This callback is defined as separate plugin property to provide possibility to override it.\n       *\n       * @param {object|undefined} error - aXe error.\n       * @param {object} results - aXe results.\n       * @param {string} editorName - Name of CKEditor instance.\n       *\n       * @return {boolean} status.\n       */\n      axe.callback = function(error, results, editorName) {\n        if (error) throw error;\n        console.log(results);\n\n        // Validate editor instance.\n        if (typeof CKEDITOR.instances[editorName] === \"undefined\") {\n          // @todo: Multilanguage.\n          // @todo: Check if there is a way to provide multilanguage with dynamic argument in string.\n          console.error(\"Can't find editor instance.\");\n          return false;\n        }\n        let editor = CKEDITOR.instances[editorName];\n\n        // In case if we have at least one violation.\n        if (typeof results.violations === \"object\") {\n          // Collect information.\n          let violations = [];\n          let nodes = [];\n          results.violations.forEach(function(violation, vid) {\n            // In case if we have child elements.\n            if (typeof violation.nodes === \"object\") {\n              // Prepare violations array.\n              violations[vid] = {\n                title: violation.help,\n                description: violation.description\n              };\n              // Go through child elements.\n              violation.nodes.forEach(function(node) {\n                if (\n                  node.target[0] !== \"undefined\" &&\n                  typeof nodes[node.target[0]] === \"undefined\"\n                ) {\n                  nodes[node.target[0]] = editor.document.$.querySelector(\n                    node.target[0]\n                  );\n                  console.dir(nodes[node.target[0]]);\n                }\n              });\n            }\n          });\n          // @todo: Continue development.\n          console.log(violations);\n          console.log(nodes);\n        }\n\n        return true;\n      };\n\n      /**\n       * Path to aXe library on your website.\n       *\n       * Path is not defined yet.\n       * But you have two ways to define it:\n       * - First one is when you will add it to:\n       * CKEDITOR.config.axe.path = 'url://path/to/axe.min.js'\n       * - Second way is when you will include axe.js in <head> tag.\n       * And it will be detected automatically.\n       */\n      axe.path = undefined;\n\n      /**\n       * Method is created in order to override default axe settings with custom one.\n       *\n       * @todo: It should be tested.\n       *\n       * @param {object} settings - Custom settings object.\n       *\n       * @return {boolean} Status.\n       */\n      axe.override = function(settings) {\n        // Process settings object.\n        if (typeof settings !== \"undefined\") {\n          // Context.\n          if (typeof settings.context !== \"undefined\") {\n            this.context = settings.context;\n          }\n          // Arguments to run function (including rules which are not allowed.).\n          if (typeof settings.run !== \"undefined\") {\n            // There are some rules which can't be overriden.\n            let mandatoryRules = this.run.rules;\n            Object.keys(mandatoryRules).forEach(function(key) {\n              settings.run[key] = mandatoryRules[key];\n            });\n            this.run = settings.run;\n          }\n          // Callback to override default behavior.\n          if (typeof settings.callback === \"function\") {\n            this.callback = settings.callback;\n          }\n          // Path to aXe library.\n          if (typeof settings.path === \"string\") {\n            this.path = settings.path;\n          }\n        }\n        // Extra validation to aXe path library.\n        if (typeof this.path !== \"string\") {\n          // Get script by file name.\n          let scripts = document.querySelectorAll(\n            // @todo: Check compatibility of the attribute selectors.\n            \"script[src$='/axe.js'],script[src$='/axe.min.js']\"\n          );\n          // Set to static variable.\n          if (scripts.length) {\n            // @todo: Detect usage of min.js and dev version.\n            this.path = scripts[0].src;\n          } else {\n            console.error(\n              // @todo: Multilanguage.\n              \"Can't fin axe.js or axe.min.js file. Please check if they were included.\"\n            );\n            return false;\n          }\n        }\n        // Define callback number.\n        if (typeof this.callbackNumber === \"undefined\") {\n          this.callbackNumber = CKEDITOR.tools.addFunction(this.callback);\n        }\n        return true;\n      };\n\n      // Save our object into plugin.\n      this.axe = axe;\n    },\n\n    /**\n     * Plugin initialization logic goes inside this method.\n     *\n     * @param {object} editor - CKEditor editor object.\n     */\n    init: function(editor) {\n      // Get plugin definition.\n      let plugin = this;\n      // @todo: Multilanguage.\n      let lang = editor.lang.axe;\n      // Override default plugin settings.\n      plugin.axe.override(editor.config.axe);\n\n      // Add extra scripts when editor is ready.\n      editor.on(\"instanceReady\", function() {\n        let scripts = [plugin.axe.path, plugin.path + \"frame.js\"];\n        let frame = this;\n        scripts.forEach(function(src) {\n          frame.document.getHead().append(\n            frame.document.createElement(\"script\", {\n              attributes: { src: src, type: \"text/javascript\", defer: true }\n            })\n          );\n        });\n      });\n\n      // Create the toolbar button that executes the above command.\n      editor.ui.addButton(\"axe\", {\n        label: lang.name,\n        command: \"axe\",\n        icon: plugin.path + \"icons/axe.png\",\n        // According to other plugins - property \"toolbar\" should be added by default.\n        // @see plugins/about/plugin.js\n        toolbar: \"others\"\n      });\n\n      // Define the editor command.\n      editor.addCommand(\"axe\", {\n        canUndo: false,\n        // Define the function that will be fired when the command is executed.\n        exec: function(editor) {\n          // Prepare message.\n          let message = {\n            command: \"run\",\n            editor: editor.name,\n            arguments: {\n              context: plugin.axe.context,\n              options: plugin.axe.run,\n              callback: plugin.axe.callbackNumber\n            }\n          };\n          // Send message to iframe to run aXe.\n          editor.document.getWindow().$.postMessage(message);\n        }\n      });\n    }\n  });\n})(CKEDITOR);\n"],"sourceRoot":""}